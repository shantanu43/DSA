/*
Name= Shantanu H. Chaudhari
Roll No.= 86
Div= B1
Practical 13= Design and implement a program for generating all possible combinations of given string using
recursion.
*/

#include<iostream>
#include<string.h>
using namespace std;

class recursion
{
	public:
	    char string[100];
        int count=0;
 	
 	void combination(char* str, int charact, int index=0)
   {
	for (int i=0; i<strlen(str); i++)
	  { 
		string[index] = str[i];
		if(index == charact-1)
		{
			count++;
			cout<<string<<endl;
		}
		else	
			combination(str, charact, index+1);	
	  } 
   }
   
};
int main()
{
	recursion r1;
	int count;
	char str[100];
	cout<<"Enter String : ";
	cin>>str;
	
	for(int i=1; i<=strlen(str); i++)
	{
		r1.combination(str, i);
    }
    cout<<"\nThere are "<< r1.count << " combination.";  
	
	return 0;
}

/*
Enter String : abcd
a
b
c
d
aa
ab
ac
ad
ba
bb
bc
bd
ca
cb
cc
cd
da
db
dc
dd
aaa
aab
aac
aad
aba
abb
abc
abd
aca
acb
acc
acd
ada
adb
adc
add
baa
bab
bac
bad
bba
bbb
bbc
bbd
bca
bcb
bcc
bcd
bda
bdb
bdc
bdd
caa
cab
cac
cad
cba
cbb
cbc
cbd
cca
ccb
ccc
ccd
cda
cdb
cdc
cdd
daa
dab
dac
dad
dba
dbb
dbc
dbd
dca
dcb
dcc
dcd
dda
ddb
ddc
ddd
aaaa
aaab
aaac
aaad
aaba
aabb
aabc
aabd
aaca
aacb
aacc
aacd
aada
aadb
aadc
aadd
abaa
abab
abac
abad
abba
abbb
abbc
abbd
abca
abcb
abcc
abcd
abda
abdb
abdc
abdd
acaa
acab
acac
acad
acba
acbb
acbc
acbd
acca
accb
accc
accd
acda
acdb
acdc
acdd
adaa
adab
adac
adad
adba
adbb
adbc
adbd
adca
adcb
adcc
adcd
adda
addb
addc
addd
baaa
baab
baac
baad
baba
babb
babc
babd
baca
bacb
bacc
bacd
bada
badb
badc
badd
bbaa
bbab
bbac
bbad
bbba
bbbb
bbbc
bbbd
bbca
bbcb
bbcc
bbcd
bbda
bbdb
bbdc
bbdd
bcaa
bcab
bcac
bcad
bcba
bcbb
bcbc
bcbd
bcca
bccb
bccc
bccd
bcda
bcdb
bcdc
bcdd
bdaa
bdab
bdac
bdad
bdba
bdbb
bdbc
bdbd
bdca
bdcb
bdcc
bdcd
bdda
bddb
bddc
bddd
caaa
caab
caac
caad
caba
cabb
cabc
cabd
caca
cacb
cacc
cacd
cada
cadb
cadc
cadd
cbaa
cbab
cbac
cbad
cbba
cbbb
cbbc
cbbd
cbca
cbcb
cbcc
cbcd
cbda
cbdb
cbdc
cbdd
ccaa
ccab
ccac
ccad
ccba
ccbb
ccbc
ccbd
ccca
cccb
cccc
cccd
ccda
ccdb
ccdc
ccdd
cdaa
cdab
cdac
cdad
cdba
cdbb
cdbc
cdbd
cdca
cdcb
cdcc
cdcd
cdda
cddb
cddc
cddd
daaa
daab
daac
daad
daba
dabb
dabc
dabd
daca
dacb
dacc
dacd
dada
dadb
dadc
dadd
dbaa
dbab
dbac
dbad
dbba
dbbb
dbbc
dbbd
dbca
dbcb
dbcc
dbcd
dbda
dbdb
dbdc
dbdd
dcaa
dcab
dcac
dcad
dcba
dcbb
dcbc
dcbd
dcca
dccb
dccc
dccd
dcda
dcdb
dcdc
dcdd
ddaa
ddab
ddac
ddad
ddba
ddbb
ddbc
ddbd
ddca
ddcb
ddcc
ddcd
ddda
dddb
dddc
dddd
*/
